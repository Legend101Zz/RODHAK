<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <script
      src="https://unpkg.com/threebox-plugin/dist/threebox.min.js"
      type="text/javascript"
    ></script>
    <link
      href="https://unpkg.com/threebox-plugin/dist/threebox.css"
      rel="stylesheet"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css"
      type="text/css"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css"
      type="text/css"
    />
    <title>Rodhak</title>
    <style>
      body {
        margin: 0;
      }

      #map {
        height: 100vh;
        width: 100vw;
      }
      .marker {
        background-image: url("/bus.png");
        background-size: cover;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
      }
      .mapboxgl-popup {
        max-width: 200px;
      }

      .mapboxgl-popup-content {
        text-align: center;
        font-family: "Open Sans", sans-serif;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/leaflet-ease/leaflet-ease.js"></script>
    <script type="module">
      // Your Mapbox access token
      var mapId = "<%=env%>";
      let data;
      var destination, line;
      var soldier;
      var routePath;
      // let SOCKET_URL = "https://himraahi.in/";
      let SOCKET_URL = "http://localhost:3000/";
      mapboxgl.accessToken = mapId;

      let stats;
      import Stats from "https://threejs.org/examples/jsm/libs/stats.module.js";
      function animate() {
        requestAnimationFrame(animate);
        stats.update();
      }

      // Create a socket connection
      const socket = io(`${SOCKET_URL}`);

      // Event handler for socket connection
      socket.on("connect", () => {
        console.log("Connected to the socket server");
      });

      // Extract the trip ID from the URL
      const queryString = window.location.pathname.split("p");
      const tripId = queryString[1].replace("/", "");

      // Initialize the map with a placeholder location
      var map = new mapboxgl.Map({
        container: "map",
        style: "mapbox://styles/mapbox/streets-v9",
        center: [0, 0], // Placeholder center
        zoom: 18,
        pitch: 60,
        bearing: 0,
      });

      // Create a marker element
      var el = document.createElement("div");
      el.className = "marker";
      // Add the marker to the map
      // var busMarker = new mapboxgl.Marker(el)
      //   .setLngLat([0, 0])
      //   .setPopup(
      //     new mapboxgl.Popup({ offset: 25 }).setHTML(
      //       "<h3>Bus Details</h3>" +
      //         "<p>Driver's Current Location</p>" +
      //         `<p>From: </p>` +
      //         `<p>To:</p>` +
      //         `<p>Via: </p>` +
      //         `<p>Time: </p>`
      //     )
      //   )
      //   .addTo(map);

      // Initialize the line object
      var line;

      // Listen for the map 'load' event
      map.on("load", async function () {
        // stats
        stats = new Stats();
        map.getContainer().appendChild(stats.dom);
        animate();
        routePath = await getRoutePath(tripId);
        console.log("Route Path", routePath);
        // Initialize the source for the bus path
        map.addSource("busPath", {
          type: "geojson",
          data: {
            type: "Feature",
            properties: {},
            geometry: {
              type: "LineString",
              coordinates: routePath,
            },
          },
        });

        map.addLayer({
          id: "custom_layer",
          type: "custom",
          renderingMode: "3d",
          onAdd: function (map, mbxContext) {
            window.tb = new Threebox(map, mbxContext, {
              defaultLights: true,
            });

            var options = {
              obj: "/models/bus.glb",
              type: "gltf",
              scale: 40,
              units: "meters",
              anchor: "bottom",
              rotation: { x: 90, y: -90, z: 0 }, //rotation to postiion the truck and heading properly
            };

            tb.loadObj(options, function (model) {
              soldier = model.setCoords([0, 0]);
              soldier.addEventListener("ObjectChanged", onObjectChanged, false);
              tb.add(soldier);
            });
          },
          render: function (gl, matrix) {
            tb.update();
          },
        });

        // Add a layer to display the completed bus path
        map.addLayer({
          id: "completedPathLayer",
          type: "line",
          source: "busPath",
          layout: {
            "line-join": "round",
            "line-cap": "round",
          },
          paint: {
            "line-color": "#007BFF", // Completed path color
            "line-width": 5, // Line width
          },
        });

        // Add a layer to display the remaining bus path
        map.addLayer({
          id: "remainingPathLayer",
          type: "line",
          source: "busPath",
          layout: {
            "line-join": "round",
            "line-cap": "round",
          },
          paint: {
            "line-color": "#FF0000", // Remaining path color
            "line-width": 5,
            "line-opacity": 0.5, // Line width
          },
        });

        // // Initialize the path between sourceLocation and destinationLocation
        // const routePath = await getRoutePath(
        //   data.sourceLocation,
        //   data.destinationLocation
        // );
        // const busPath = map.getSource("busPath");
      });

      // Initialize an empty array to store coordinates
      let coordinatesArray = [];
      // Listen for WebSocket updates from the server
      socket.on("broadcastDriverData", async (data) => {
        // Check if the data is for the specific trip
        const stringWithoutSlash = queryString[1].replace("/", "");
        if (data.tripID === stringWithoutSlash) {
          // console.log("Received data:", data);
          // console.log("In it's space:", data.tripID, stringWithoutSlash);
          // console.log("Got coords for Hardy", data);
          // console.log("3d model", soldier);
          let via;
          // if (data.viaLocation) {
          //   via = await reverseGeocode(data.viaLocation);
          // }

          // Update the marker's location
          if (!isNaN(data.longitude) && !isNaN(data.latitude) && soldier) {
            // soldier.setCoords([data.longitude, data.latitude]);
            console.log("data from sockets ", data);

            soldier.setCoords([data.longitude, data.latitude]);
            coordinatesArray.push([data.longitude, data.latitude]);

            if (coordinatesArray.length > 1) {
              line.setGeometry({
                type: "LineString",
                coordinates: coordinatesArray,
              });
            }
          } else {
            console.error(
              "Invalid latitude or longitude in the received data:",
              data
            );
          }

          // Check if sourceLocation and destinationLocation are available
          if (data.sourceLocation && data.destinationLocation) {
            // var options = {
            //   path: routePath,
            //   duration: 100000, // Adjust duration as needed
            //   trackHeading: true, // Rotate the object to stay aligned with the direction of travel
            // };
            // soldier.followPath(options, function (m) {
            //   console.log("woeking check", m);
            //   tb.remove(line);
            // });
            // set up geometry for a line to be added to map, lofting it up a bit for *style*
            //   var lineGeometry = options.path.map(function (coordinate) {
            //     return coordinate.concat([15]);
            //   });
            //   // create and add line object
            //   line = tb.line({
            //     geometry: lineGeometry,
            //     width: 3,
            //     color: "green",
            //   });
            //   tb.add(line);
          }

          // Update the popup content
          // busMarker
          //   .getPopup()
          //   .setHTML(
          //     "<h3>Bus Details</h3>" +
          //       "<p>Driver's Current Location</p>" +
          //       `<p>From: ${await reverseGeocode(data.sourceLocation)}</p>` +
          //       `<p>To: ${await reverseGeocode(data.destinationLocation)}</p>` +
          //       `<p>Via: ${via || "N/A"}</p>` +
          //       `<p>Time: ${formatTime(data.currentTime)}</p>`
          //   );

          // Fly to the updated location with a smooth transition
          // map.flyTo({
          //   center: [data.longitude, data.latitude],
          //   speed: 0.6,
          // });
          // }
        }
      });

      function onObjectChanged(e) {
        let model = e.detail.object; //here's the object already modified
        let action = e.detail.action; //here's the action that changed the object
        // console.log("model click action", action);
      }

      // Function to get the route path between sourceLocation and destinationLocation
      async function getRoutePath(tripId) {
        try {
          const response = await fetch(`/himraahi/trip/Coords/${tripId}`);
          const tripData = await response.json();
          // console.log("trip response", tripData);
          const sourceLocation = tripData.coordinateStart;
          const destinationLocation = tripData.coordinateEnd;

          const response2 = await fetch(
            `https://api.mapbox.com/directions/v5/mapbox/driving/${sourceLocation[0]},${sourceLocation[1]};${destinationLocation[0]},${destinationLocation[1]}?geometries=geojson&access_token=${mapboxgl.accessToken}`
          );
          const data = await response2.json();
          // console.log("trip response 2", data);
          return data.routes[0].geometry.coordinates;
        } catch (error) {
          console.error("Error fetching route path:", error);
          return [];
        }
      }
      // Function to perform reverse geocoding
      // async function reverseGeocode(location) {
      //   const response = await fetch(
      //     `https://api.mapbox.com/geocoding/v5/mapbox.places/${location[1]},${location[0]}.json?types=poi&access_token=${mapboxgl.accessToken}`
      //   );

      //   const data = await response.json();
      //   console.log("reverseGeocode", data);
      //   // Return the formatted location name
      //   return data.features[0] ? data.features[0].place_name : "N/A";
      // }

      // Function to format the time
      function formatTime(currentTime) {
        const date = new Date(currentTime);
        return date.toLocaleString(); // Adjust this according to your preferred format
      }
    </script>
  </body>
</html>
