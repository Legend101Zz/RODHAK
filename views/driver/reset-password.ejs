<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reset Password - RODHAK</title>
    <style>
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: "Arial", sans-serif;
        background-color: #f3f6fd;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
      }

      .container {
        max-width: 450px;
        width: 100%;
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }

      .header {
        background: linear-gradient(to right, #c6426e, #642b73);
        color: white;
        text-align: center;
        padding: 30px 20px;
      }

      .header img {
        width: 120px;
        margin-bottom: 15px;
      }

      .header h1 {
        font-size: 24px;
        font-weight: 500;
      }

      .form-container {
        padding: 30px;
      }

      h2 {
        margin-bottom: 20px;
        color: #333;
        font-size: 20px;
      }

      .info-text {
        color: #666;
        line-height: 1.6;
        margin-bottom: 25px;
      }

      .form-group {
        margin-bottom: 20px;
      }

      .form-group label {
        display: block;
        margin-bottom: 8px;
        color: #555;
        font-weight: 500;
      }

      .form-group input {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 16px;
        transition: border-color 0.3s;
      }

      .form-group input:focus {
        border-color: #642b73;
        outline: none;
      }

      /* Password field container styles */
      .password-field-container {
        position: relative;
      }

      /* Toggle password button styles */
      .toggle-password {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #777;
        cursor: pointer;
        font-size: 16px;
        padding: 5px;
      }

      .toggle-password:focus {
        outline: none;
      }

      .toggle-password i {
        display: block;
        width: 24px;
        height: 24px;
        background-size: contain;
        background-repeat: no-repeat;
      }

      .password-visible i {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23777' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z'%3E%3C/path%3E%3Ccircle cx='12' cy='12' r='3'%3E%3C/circle%3E%3C/svg%3E");
      }

      .password-hidden i {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23777' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z'%3E%3C/path%3E%3Ccircle cx='12' cy='12' r='3'%3E%3C/circle%3E%3Cline x1='1' y1='1' x2='23' y2='23'%3E%3C/line%3E%3C/svg%3E");
      }

      .password-requirements {
        margin-top: 10px;
        font-size: 14px;
        color: #666;
      }

      .requirements-list {
        margin-top: 5px;
        padding-left: 20px;
      }

      .requirements-list li {
        margin-bottom: 4px;
        font-size: 13px;
        color: #777;
        position: relative;
      }

      .requirements-list li.valid {
        color: #28a745;
      }

      .requirements-list li.valid::before {
        content: "✓";
        color: #28a745;
        position: absolute;
        left: -18px;
      }

      .requirements-list li.invalid {
        color: #dc3545;
      }

      .requirements-list li.invalid::before {
        content: "✗";
        color: #dc3545;
        position: absolute;
        left: -18px;
      }

      .btn {
        background: linear-gradient(to right, #c6426e, #642b73);
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 6px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        width: 100%;
        transition: opacity 0.3s;
      }

      .btn:hover {
        opacity: 0.9;
      }

      .btn:disabled {
        background: #cccccc;
        cursor: not-allowed;
        opacity: 0.7;
      }

      .alert {
        padding: 12px 15px;
        border-radius: 6px;
        margin-bottom: 20px;
      }

      .alert-error {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }

      .password-strength {
        height: 6px;
        margin-top: 8px;
        border-radius: 3px;
        background-color: #eee;
        overflow: hidden;
      }

      .password-strength-meter {
        height: 100%;
        width: 0%;
        transition: width 0.3s ease;
      }

      .strength-weak {
        width: 33%;
        background-color: #dc3545;
      }

      .strength-medium {
        width: 66%;
        background-color: #ffc107;
      }

      .strength-strong {
        width: 100%;
        background-color: #28a745;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <img
          src="https://www.live.himraahi.in/static/media/rd.b58b48b62a94a351f327.png"
          alt="RODHAK Logo"
        />
        <h1>Reset Your Password</h1>
      </div>

      <div class="form-container">
        <h2>Create New Password</h2>

        <p class="info-text">
          Please create a new password for your account:
          <strong><%= email %></strong>
        </p>

        <% if (locals.error) { %>
        <div class="alert alert-error"><%= error %></div>
        <% } %>

        <form
          id="resetPasswordForm"
          action="/api/v1/driver/reset-password/<%= token %>"
          method="POST"
        >
          <div class="form-group">
            <label for="password">New Password</label>
            <div class="password-field-container">
              <input
                type="password"
                id="password"
                name="password"
                required
                minlength="8"
              />
              <button
                type="button"
                class="toggle-password password-hidden"
                aria-label="Toggle password visibility"
              >
                <i></i>
              </button>
            </div>
            <div class="password-strength">
              <div class="password-strength-meter"></div>
            </div>
            <div class="password-requirements">
              <p>Password requirements:</p>
              <ul class="requirements-list">
                <li id="length">At least 8 characters</li>
                <li id="uppercase">At least one uppercase letter</li>
                <li id="lowercase">At least one lowercase letter</li>
                <li id="number">At least one number</li>
                <li id="special">At least one special character</li>
              </ul>
            </div>
          </div>

          <div class="form-group">
            <label for="confirmPassword">Confirm New Password</label>
            <div class="password-field-container">
              <input
                type="password"
                id="confirmPassword"
                name="confirmPassword"
                required
                minlength="8"
              />
              <button
                type="button"
                class="toggle-password password-hidden"
                aria-label="Toggle password visibility"
              >
                <i></i>
              </button>
            </div>
            <div
              id="password-match"
              style="margin-top: 5px; font-size: 13px; color: #777"
            ></div>
          </div>

          <button type="submit" class="btn" id="submitButton" disabled>
            Reset Password
          </button>
        </form>
      </div>
    </div>

    <script>
      // Password toggle functionality
      document.querySelectorAll(".toggle-password").forEach((button) => {
        button.addEventListener("click", function () {
          const passwordInput = this.parentElement.querySelector("input");
          const type = passwordInput.getAttribute("type");

          if (type === "password") {
            passwordInput.setAttribute("type", "text");
            this.classList.remove("password-hidden");
            this.classList.add("password-visible");
          } else {
            passwordInput.setAttribute("type", "password");
            this.classList.remove("password-visible");
            this.classList.add("password-hidden");
          }
        });
      });

      // Password validation
      const passwordInput = document.getElementById("password");
      const confirmPasswordInput = document.getElementById("confirmPassword");
      const submitButton = document.getElementById("submitButton");
      const passwordMatchElement = document.getElementById("password-match");
      const passwordStrengthMeter = document.querySelector(
        ".password-strength-meter"
      );

      // Password requirement elements
      const lengthRequirement = document.getElementById("length");
      const uppercaseRequirement = document.getElementById("uppercase");
      const lowercaseRequirement = document.getElementById("lowercase");
      const numberRequirement = document.getElementById("number");
      const specialRequirement = document.getElementById("special");

      // Track requirements
      let requirements = {
        length: false,
        uppercase: false,
        lowercase: false,
        number: false,
        special: false,
      };

      // Track password match
      let passwordsMatch = false;

      function updateSubmitButton() {
        // Check if all requirements are met and passwords match
        const allRequirementsMet = Object.values(requirements).every(
          (req) => req === true
        );
        submitButton.disabled = !(allRequirementsMet && passwordsMatch);
      }

      function validatePassword() {
        const password = passwordInput.value;

        // Check length
        requirements.length = password.length >= 8;
        lengthRequirement.className = requirements.length ? "valid" : "invalid";

        // Check uppercase
        requirements.uppercase = /[A-Z]/.test(password);
        uppercaseRequirement.className = requirements.uppercase
          ? "valid"
          : "invalid";

        // Check lowercase
        requirements.lowercase = /[a-z]/.test(password);
        lowercaseRequirement.className = requirements.lowercase
          ? "valid"
          : "invalid";

        // Check number
        requirements.number = /[0-9]/.test(password);
        numberRequirement.className = requirements.number ? "valid" : "invalid";

        // Check special character
        requirements.special = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(
          password
        );
        specialRequirement.className = requirements.special
          ? "valid"
          : "invalid";

        // Update password strength meter
        let strengthScore = Object.values(requirements).filter(Boolean).length;
        passwordStrengthMeter.className = "password-strength-meter";

        if (strengthScore <= 2) {
          passwordStrengthMeter.classList.add("strength-weak");
        } else if (strengthScore <= 4) {
          passwordStrengthMeter.classList.add("strength-medium");
        } else {
          passwordStrengthMeter.classList.add("strength-strong");
        }

        // Check if passwords match
        checkPasswordMatch();

        // Update submit button state
        updateSubmitButton();
      }

      function checkPasswordMatch() {
        const password = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;

        if (confirmPassword.length === 0) {
          passwordMatchElement.textContent = "";
          passwordMatchElement.className = "";
          passwordsMatch = false;
        } else if (password === confirmPassword) {
          passwordMatchElement.textContent = "Passwords match";
          passwordMatchElement.className = "valid";
          passwordsMatch = true;
        } else {
          passwordMatchElement.textContent = "Passwords do not match";
          passwordMatchElement.className = "invalid";
          passwordsMatch = false;
        }

        updateSubmitButton();
      }

      // Add event listeners
      passwordInput.addEventListener("input", validatePassword);
      confirmPasswordInput.addEventListener("input", checkPasswordMatch);

      // Initial validation
      validatePassword();

      // Form submission validation
      document
        .getElementById("resetPasswordForm")
        .addEventListener("submit", function (e) {
          if (passwordInput.value !== confirmPasswordInput.value) {
            e.preventDefault();
            const errorDiv = document.createElement("div");
            errorDiv.className = "alert alert-error";
            errorDiv.textContent = "Passwords do not match";

            const existingAlert = document.querySelector(".alert");
            if (existingAlert) {
              existingAlert.remove();
            }

            this.insertBefore(errorDiv, this.firstChild);
            window.scrollTo(0, 0);
          }
        });
    </script>
  </body>
</html>
