<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css"
      type="text/css"
    />
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.js"></script>
    <title>Rodhak</title>
    <style>
      body {
        margin: 0;
      }

      #map {
        height: 100vh;
        width: 100vw;
      }

      #speeds {
        height: 50px;
        width: 50px;
        color: black;
        border-radius: 50%;
        background-color: white;
        opacity: 0.2rem;
        box-shadow: 0px -5px 10px 0px rgba(0, 0, 0, 0.5);
        z-index: 100;
        position: absolute;
        bottom: 4rem;
        right: 0.5rem;
      }
      #speed {
        /* margin-left: 0.7rem; */
        text-align: center;
        margin-top: 0.5rem;
        font-size: 1.2rem;
        font-weight: 700;
      }
      .kmh {
        margin-top: -0.2rem;
        /* margin-left: 0.2rem; */
        text-align: center;
        font-size: 0.8rem;
      }
      .marker {
        background-image: url("/rodhak.jpeg");
        background-size: cover;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
      }

      /* CSS */
      .stop-btn {
        position: fixed;
        z-index: 100;
      }
      .button-24 {
        background: #ff4742;
        border: 1px solid #ff4742;
        border-radius: 6px;
        box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;
        box-sizing: border-box;
        color: #ffffff;
        cursor: pointer;
        display: inline-block;
        font-family: nunito, roboto, proxima-nova, "proxima nova", sans-serif;
        font-size: 16px;
        font-weight: 800;
        line-height: 16px;
        min-height: 40px;
        outline: 0;
        padding: 12px 14px;
        text-align: center;
        text-rendering: geometricprecision;
        text-transform: none;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        vertical-align: middle;
      }

      .button-24:hover,
      .button-24:active {
        background-color: initial;
        background-position: 0 0;
        color: white;
      }

      .button-24:active {
        opacity: 0.5;
      }
      @media screen and (max-width: 786px) {
        .hareKrishna {
          /* position: absolute;
          left: -100%; */
          display: none;
        }
        .mapboxgl-ctrl-directions.mapboxgl-ctrl {
          display: none;
        }
      }
      .hareKrishna {
        /* position: absolute;
          left: -100%; */
        display: none;
      }

      .toggle {
        position: relative;
        height: 12px;
        width: 125px;
        cursor: pointer;
        border-radius: 25px;
        background-color: #fff;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        z-index: 101;
      }
      .toggle::before {
        content: "";
        position: fixed;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        height: 50px;
        width: 50px;
        border-radius: 50%;
        background-color: #7d2ae8;
        border: 10px solid #fff;
        transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
      }
      .toggle.active::before {
        left: calc(100% - 70px);
        background-color: #fff;
        border-color: #7d2ae8;
      }
    </style>
  </head>
  <body>
    <div class="toggle"></div>
    <div class="stop-btn">
      <button class="button-24" role="button">
        <a href="/api/v1/driver/end">Stop Trip </a>
      </button>
    </div>
    <div id="map"></div>
    <div id="speeds">
      <div id="speed"></div>
      <!-- <br /> -->
      <p class="kmh">Km/h</p>
    </div>
    <script>
      mapboxgl.accessToken = "<%-process.env.MAP_BOX%>";
      start = "<%-trip.Start%>";
      end = "<%-trip.End%>";
      navigator.geolocation.getCurrentPosition(successLocation, errorLocation, {
        enableHighAccuracy: true,
      });

      navigator.geolocation.watchPosition(successApi, errorApi, {
        enableHighAccuracy: true,
      });

      //DOM-manipulation

      const toggleBtn = document.querySelector(".toggle");
      console.log(toggleBtn, "heree");
      const windowControll = document.getElementsByClassName(
        "mapboxgl-ctrl-directions"
      );
      const krishna = document.querySelector(".directions-control-directions");
      console.log(krishna, "styling");
      console.log(windowControll);

      // function myFunction() {
      //   console.log("check");
      //   toggleBtn.classList.toggle("active");
      //   windowControll.classList.toggle("hareKrishna");
      // }

      toggleBtn.addEventListener("click", () => {
        toggleBtn.classList.toggle("active");
        windowControll[0].classList.toggle("hareKrishna");
        // directions-control directions-control-directions
      });

      //api-post for sending driver's coord
      async function postJSON(data) {
        try {
          const response = await fetch(
            "https://rodhak11.onrender.com/himraahi/coordinate",
            {
              method: "POST", // or 'PUT'
              mode: "cors",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(data),
            }
          );

          const result = await response.json();
          console.log("Success:", result);
        } catch (error) {
          console.log("Error:", error);
        }
      }

      function successApi(position) {
        console.log(position.coords);
        const long = position.coords.longitude;
        const lat = position.coords.latitude;
        const speed = position.coords.speed;
        const data = { long, lat, speed };
        // setupMap([position.coords.longitude, position.coords.latitude]);
        const exact = document.getElementById("speed");
        console.log(position.coords.heading);
        if (position.coords.heading) {
          exact.innerHTML = `${position.coords.heading}`;
          postJSON({ data: data });
          setupMap([position.coords.longitude, position.coords.latitude]);
        } else {
          exact.innerHTML = "0";
        }

        return data;

        // const pointer = [long, lat];
        // console.log(data);
      }

      function errorApi(err) {
        setupMap([77.170973, 31.104153]);
        console.log(err);
      }

      function successLocation(position) {
        console.log(position);
        setupMap([position.coords.longitude, position.coords.latitude]);
      }

      function errorLocation() {
        const exact = document.getElementById("speed");
        exact.innerHTML = "0";
      }

      function setupMap(center) {
        const map = new mapboxgl.Map({
          container: "map",
          style: "mapbox://styles/mapbox/navigation-night-v1",
          center: center,
          zoom: 15,
        });

        const directions = new MapboxDirections({
          accessToken: mapboxgl.accessToken,
          unit: "metric",
          interactive: false,
        });

        map.addControl(directions, "bottom-left");

        directions.setOrigin(start);
        directions.setDestination(end);
        const nav = new mapboxgl.NavigationControl();
        map.addControl(nav);

        const geojson = {
          type: "FeatureCollection",
          features: [
            {
              type: "Feature",
              geometry: {
                type: "Point",
                coordinates: center,
              },
              properties: {
                title: "Rodhak",
                description: "Your Current Location",
              },
            },
          ],
        };
        // add markers to map
        for (const feature of geojson.features) {
          // create a HTML element for each feature
          const el = document.createElement("div");
          el.className = "marker";

          // make a marker for each feature and add to the map
          new mapboxgl.Marker(el)
            .setLngLat(feature.geometry.coordinates)
            .addTo(map);
        }
      }
    </script>
  </body>
</html>
