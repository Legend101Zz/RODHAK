<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css"
    />
    <script src="https://unpkg.com/threebox-plugin@2.2.7/dist/threebox.js"></script>
    <link
      href="https://unpkg.com/threebox-plugin@2.2.7/dist/threebox.css"
      rel="stylesheet"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.10.7/dayjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.10.7/plugin/utc.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.10.7/plugin/timezone.min.js"></script>
    <title>HimRaahi - Live Bus Tracking</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          "Helvetica Neue", Arial, sans-serif;
      }

      body {
        margin: 0;
        overflow: hidden;
      }

      #map {
        height: 100vh;
        width: 100vw;
        position: relative;
      }

      .control-panel {
        position: absolute;
        top: 20px;
        left: 20px;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 20px;
        width: 320px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(8px);
        z-index: 1000;
      }

      .trip-info {
        margin-bottom: 20px;
      }

      .trip-info h2 {
        color: #1a73e8;
        margin-bottom: 15px;
        font-size: 1.5rem;
      }

      .location-card {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        border-left: 4px solid #1a73e8;
      }

      .location-card.current {
        border-left-color: #34a853;
        background: #e8f5e9;
      }

      .location-label {
        font-size: 0.85rem;
        color: #5f6368;
        margin-bottom: 4px;
      }

      .location-name {
        font-weight: 500;
        color: #202124;
      }

      .progress-container {
        margin: 15px 0;
        background: #e0e0e0;
        height: 4px;
        border-radius: 2px;
        overflow: hidden;
      }

      .progress-bar {
        height: 100%;
        background: #1a73e8;
        transition: width 0.3s ease;
      }

      .eta-panel {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f8f9fa;
        padding: 12px;
        border-radius: 8px;
        margin-top: 15px;
      }

      .eta-info {
        display: flex;
        flex-direction: column;
      }

      .eta-label {
        font-size: 0.85rem;
        color: #5f6368;
      }

      .eta-value {
        font-size: 1.2rem;
        font-weight: 500;
        color: #1a73e8;
      }

      .view-controls {
        position: absolute;
        bottom: 30px;
        right: 20px;
        display: flex;
        gap: 10px;
        z-index: 1000;
      }

      .control-button {
        background: white;
        border: none;
        padding: 12px;
        border-radius: 50%;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
      }

      .control-button:hover {
        background: #f8f9fa;
        transform: translateY(-2px);
      }

      .control-button svg {
        width: 20px;
        height: 20px;
      }

      .milestone-notification {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(26, 115, 232, 0.95);
        color: white;
        padding: 12px 24px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        z-index: 2000;
        display: none;
        animation: slideDown 0.3s ease;
      }

      @keyframes slideDown {
        from {
          transform: translate(-50%, -100%);
          opacity: 0;
        }
        to {
          transform: translate(-50%, 0);
          opacity: 1;
        }
      }

      .mode-toggle {
        position: absolute;
        top: 20px;
        right: 20px;
        background: white;
        border-radius: 20px;
        padding: 4px;
        display: flex;
        gap: 4px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      }

      .mode-button {
        padding: 8px 16px;
        border: none;
        border-radius: 16px;
        background: transparent;
        cursor: pointer;
        font-size: 0.9rem;
        color: #5f6368;
        transition: all 0.2s ease;
      }

      .mode-button.active {
        background: #1a73e8;
        color: white;
      }

      @media (max-width: 768px) {
        .control-panel {
          width: calc(100% - 40px);
          max-height: 50vh;
          overflow-y: auto;
        }
      }
    </style>
  </head>
  <body>
    <div id="map"></div>

    <div class="control-panel">
      <div class="trip-info">
        <h2>Trip Progress</h2>
        <div class="location-card">
          <div class="location-label">FROM</div>
          <div class="location-name" id="sourceLocation">Loading...</div>
        </div>
        <div class="location-card">
          <div class="location-label">VIA</div>
          <div class="location-name" id="viaLocation">Loading...</div>
        </div>
        <div class="location-card">
          <div class="location-label">TO</div>
          <div class="location-name" id="destinationLocation">Loading...</div>
        </div>

        <div class="progress-container">
          <div class="progress-bar" id="tripProgress"></div>
        </div>

        <div class="eta-panel">
          <div class="eta-info">
            <span class="eta-label">ESTIMATED ARRIVAL</span>
            <span class="eta-value" id="etaTime">--:--</span>
          </div>
          <div class="eta-info">
            <span class="eta-label">LAST UPDATED</span>
            <span class="eta-value" id="lastUpdatedTime">--:--</span>
          </div>
        </div>
      </div>
    </div>

    <div class="mode-toggle">
      <button class="mode-button active" data-mode="default">Default</button>
      <button class="mode-button" data-mode="satellite">Satellite</button>
      <button class="mode-button" data-mode="terrain">Terrain</button>
    </div>

    <div class="view-controls">
      <button class="control-button" id="zoomIn" title="Zoom In">
        <svg
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <line x1="12" y1="5" x2="12" y2="19"></line>
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
      </button>
      <button class="control-button" id="zoomOut" title="Zoom Out">
        <svg
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
      </button>
      <button class="control-button" id="followBus" title="Follow Bus">
        <svg
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <circle cx="12" cy="12" r="3"></circle>
          <path
            d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"
          ></path>
        </svg>
      </button>
    </div>

    <div class="milestone-notification" id="milestoneNotification"></div>

    <script src="/socket.io/socket.io.js"></script>
    <script type="module">
      // Initialize variables in global scope
      const SOCKET_URL = "http://localhost:3000/";
      const socket = io(SOCKET_URL);
      const tripId = window.location.pathname.split("p")[1].replace("/", "");

      let map;
      let threebox;
      let busModel;
      let routePath;
      let updated_data = false;
      let isFollowingBus = true;
      let coordinatesArray = [];
      let modelLoaded = false;

      // Map styles configuration
      const mapStyles = {
        streets: "mapbox://styles/mapbox/streets-v11",
        satellite: "mapbox://styles/mapbox/satellite-streets-v11",
        terrain: "mapbox://styles/mapbox/outdoors-v11",
      };

      // Initialize timezone handling
      dayjs.extend(window.dayjs_plugin_utc);
      dayjs.extend(window.dayjs_plugin_timezone);
      dayjs.tz.setDefault("Asia/Kolkata");

      // Initialize the map
      async function initializeMap() {
        mapboxgl.accessToken = "<%=env%>";

        map = new mapboxgl.Map({
          container: "map",
          style: mapStyles.streets,
          center: [0, 0],
          zoom: 14,
          pitch: 45,
          bearing: 0,
        });

        // Wait for initial map load
        await new Promise((resolve) => map.on("load", resolve));

        // Get initial route data
        routePath = await getRoutePath(tripId);

        // Initialize map features
        await setupMapLayers();
        await setupBusModel();
        setupEventListeners();
      }

      // Set up initial map layers
      async function setupMapLayers() {
        if (!map.getSource("route")) {
          map.addSource("route", {
            type: "geojson",
            data: {
              type: "Feature",
              properties: {},
              geometry: {
                type: "LineString",
                coordinates: routePath || [],
              },
            },
          });

          map.addLayer({
            id: "route-line",
            type: "line",
            source: "route",
            layout: {
              "line-join": "round",
              "line-cap": "round",
            },
            paint: {
              "line-color": "#1a73e8",
              "line-width": 4,
              "line-opacity": 0.8,
            },
          });
        }
      }

      // Set up 3D bus model
      async function setupBusModel() {
        // Add new custom layer for 3D model
        map.addLayer({
          id: "3d-model",
          type: "custom",
          renderingMode: "3d",
          onAdd: function (map, gl) {
            window.tb = new Threebox(map, gl, {
              defaultLights: true,
              enableTooltips: true,
            });

            tb.loadObj(
              {
                obj: "/models/bus.glb",
                type: "gltf",
                scale: 1,
                anchor: "bottom",
                units: "scene",
                rotation: { x: 90, y: -90, z: 0 },
              },
              function (model) {
                busModel = model;
                busModel.setCoords([0, 0]);
                tb.add(busModel);
              }
            );
          },
          render: function (gl, matrix) {
            if (tb) {
              tb.update();
            }
          },
        });
      }

      // Set up event listeners for controls
      function setupEventListeners() {
        // Zoom controls
        document.getElementById("zoomIn").addEventListener("click", () => {
          map.zoomIn();
        });

        document.getElementById("zoomOut").addEventListener("click", () => {
          map.zoomOut();
        });

        // Follow bus toggle
        document.getElementById("followBus").addEventListener("click", () => {
          isFollowingBus = !isFollowingBus;
          document.getElementById("followBus").classList.toggle("active");
        });

        // Map style switching
        document.querySelectorAll(".mode-button").forEach((button) => {
          button.addEventListener("click", async () => {
            const mode = button.dataset.mode;

            // Update button states
            document.querySelectorAll(".mode-button").forEach((btn) => {
              btn.classList.remove("active");
            });
            button.classList.add("active");

            // Change map style
            map.setStyle(mapStyles[mode]);

            // Wait for style to load
            await new Promise((resolve) => map.once("style.load", resolve));

            // Reinitialize layers and 3D model
            await setupMapLayers();
            await setupBusModel();
          });
        });
      }

      // Socket event handling
      socket.on("broadcastDriverData", async (data) => {
        if (data.tripID === tripId) {
          updateTripInfo(data);
          updateBusLocation(data);
        }
      });

      function updateTripInfo(data) {
        if (!updated_data) {
          // Update location information
          if (data.sourceLocation) {
            document.getElementById("sourceLocation").textContent =
              data.sourceLocation;
          }
          if (data.destinationLocation) {
            document.getElementById("destinationLocation").textContent =
              data.destinationLocation;
          }
          if (data.viaLocation) {
            document.getElementById("viaLocation").textContent =
              data.viaLocation;
          }
        }

        // Update time
        if (data.currentTime) {
          const currentDate = dayjs().format("YYYY-MM-DD"); // Get the current date in the required format
          const dateTimeString = `${currentDate} ${data.currentTime}`; // Combine date and time

          const time = dayjs(dateTimeString)
            .tz("Asia/Kolkata")
            .format("hh:mm A");
          document.getElementById("lastUpdatedTime").textContent = time;
        }

        // Update progress bar if available
        if (data) {
          document.getElementById(
            "tripProgress"
          ).style.width = `${Math.random()}%`;
        }
      }

      function updateBusLocation(data) {
        if (!isNaN(data.longitude) && !isNaN(data.latitude) && busModel) {
          const newPosition = [data.longitude, data.latitude];

          // Update bus position
          busModel.setCoords(newPosition);

          // Update camera if following bus
          if (isFollowingBus) {
            map.flyTo({
              center: newPosition,
              speed: 0.5,
              curve: 1,
            });
          }

          // Update completed route
          coordinatesArray.push(newPosition);
          if (map.getSource("route")) {
            map.getSource("route").setData({
              type: "Feature",
              properties: {},
              geometry: {
                type: "LineString",
                coordinates: coordinatesArray,
              },
            });
          }
        }
      }

      // Helper function to get route path
      async function getRoutePath(tripId) {
        try {
          const response = await fetch(
            `${SOCKET_URL}himraahi/trip/Coords/${tripId}`
          );
          const tripData = await response.json();

          const sourceLocation = tripData.coordinateStart;
          const destinationLocation = tripData.coordinateEnd;
          const via = tripData.via;

          const directionsResponse = await fetch(
            `https://api.mapbox.com/directions/v5/mapbox/driving/${sourceLocation[1]},${sourceLocation[0]};${via[1]},${via[0]};${destinationLocation[1]},${destinationLocation[0]}?alternatives=true&geometries=geojson&access_token=${mapboxgl.accessToken}`
          );

          const directionsData = await directionsResponse.json();
          return directionsData.routes[0].geometry.coordinates;
        } catch (error) {
          console.error("Error fetching route path:", error);
          return [];
        }
      }

      // Initialize the application
      initializeMap().catch(console.error);
    </script>
  </body>
</html>
