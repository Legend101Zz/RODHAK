<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css"
      type="text/css"
    />
    <title>Rodhak</title>
    <style>
      body {
        margin: 0;
      }

      #map {
        height: 100vh;
        width: 100vw;
      }
      .marker {
        background-image: url("/bus.png");
        background-size: cover;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
      }
      .mapboxgl-popup {
        max-width: 200px;
      }

      .mapboxgl-popup-content {
        text-align: center;
        font-family: "Open Sans", sans-serif;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      // Your Mapbox access token
      var mapId = "<%=env%>";
      mapboxgl.accessToken = mapId;

      // Create a socket connection
      const socket = io("http://195.35.45.35:3000/");

      // Event handler for socket connection
      socket.on("connect", () => {
        console.log("Connected to the socket server");
      });

      // Extract the trip ID from the URL
      const queryString = window.location.pathname.split("p");
      console.log(queryString[1], "here");

      // Initialize the map with a placeholder location
      const map = new mapboxgl.Map({
        container: "map",
        style: "mapbox://styles/mapbox/streets-v12",
        center: [0, 0], // Placeholder center
        zoom: 15,
      });

      // Listen for the map 'load' event
      map.on("load", function () {
        // Initialize the source for the bus path
        map.addSource("busPath", {
          type: "geojson",
          data: {
            type: "Feature",
            properties: {},
            geometry: {
              type: "LineString",
              coordinates: [], // Initially empty
            },
          },
        });

        // Add a layer to display the bus path
        map.addLayer({
          id: "busPathLayer",
          type: "line",
          source: "busPath",
          layout: {
            "line-join": "round",
            "line-cap": "round",
          },
          paint: {
            "line-color": "#007BFF", // Line color
            "line-width": 2, // Line width
          },
        });

        // Create a marker element
        const el = document.createElement("div");
        el.className = "marker";

        // Add the marker to the map
        const busMarker = new mapboxgl.Marker(el)
          .setLngLat([0, 0])
          .setPopup(
            new mapboxgl.Popup({ offset: 25 }).setHTML(
              "<h3>Bus Details</h3>" +
                "<p>Driver's Current Location</p>" +
                `<p>From: </p>` +
                `<p>To:</p>` +
                `<p>Via: </p>` +
                `<p>Time: </p>`
            )
          )
          .addTo(map);

        // Listen for WebSocket updates from the server
        socket.on("broadcastDriverData", (data) => {
          console.log("Received data:", data);

          // Check if the data is for the specific trip
          const stringWithoutSlash = queryString[1].replace("/", "");
          // if (data.tripID === stringWithoutSlash) {
          console.log("Got coords for Hardy", data);
          let via;
          if (data[viaLocation]) {
            via = data[viaLocation];
          }

          // Update the marker's location
          if (!isNaN(data.longitude) && !isNaN(data.latitude)) {
            busMarker.setLngLat([data.longitude, data.latitude]);
          } else {
            console.error(
              "Invalid latitude or longitude in the received data:",
              data
            );
          }

          // Update the bus path with the new coordinates
          const busPath = map.getSource("busPath");
          const pathCoordinates = busPath._data.geometry.coordinates;
          pathCoordinates.push([data.longitude, data.latitude]);
          busPath.setData({
            type: "Feature",
            properties: {},
            geometry: {
              type: "LineString",
              coordinates: pathCoordinates,
            },
          });

          // Update the popup content
          busMarker
            .getPopup()
            .setHTML(
              "<h3>Bus Details</h3>" +
                "<p>Driver's Current Location</p>" +
                `<p>From: ${data[sourceLocation]}</p>` +
                `<p>To: ${data[destinationLocation]}</p>` +
                `<p>Via: ${via}</p>` +
                `<p>Time: ${data[currentTime]}</p>`
            );

          // Fly to the updated location with a smooth transition
          map.flyTo({
            center: [data[latitude], data[latitude]],
            speed: 0.5,
          });
          // }
        });
      });
    </script>
  </body>
</html>
