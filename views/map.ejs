<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />

    <script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css"
      type="text/css"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css"
      type="text/css"
    />
    <script
      src="https://unpkg.com/threebox-plugin/dist/threebox.min.js"
      type="text/javascript"
    ></script>
    <link
      href="https://unpkg.com/threebox-plugin/dist/threebox.css"
      rel="stylesheet"
    />
    <title>Rodhak</title>
    <style>
      body {
        margin: 0;
      }

      #map {
        height: 100vh;
        width: 100vw;
        position: relative;
      }

      #legend {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(255, 255, 255, 0.3); /* Translucent background */
        border: 1px solid rgba(0, 0, 0, 0.1); /* Border */
        border-radius: 10px; /* Rounded corners */
        padding: 10px;
        font-family: Arial, sans-serif;
      }

      .legend-item {
        margin-bottom: 5px;
        width: 200px;
      }

      .legend-item span {
        display: inline-block;
        width: 20px;
        height: 20px;
        margin-right: 5px;
        border-radius: 50%;
      }

      .legend-item .color-red {
        background-color: #ff0000;
        margin-bottom: 1rem;
      }

      .legend-item .color-green {
        background-color: #00ff00;
        margin-bottom: 1rem;
      }

      .legend-item .label {
        vertical-align: super;
      }

      .modal {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: rgba(255, 255, 255, 0.3);
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        padding: 20px;
        font-family: Arial, sans-serif;
        backdrop-filter: blur(10px);
        max-height: 300px;
        overflow: hidden;
        transition: max-height 0.3s ease, padding 0.3s ease;
      }

      .modal.minimized {
        max-height: 40px;
        padding: 10px;
      }

      .modal-content {
        text-align: center;
        position: relative;
      }

      .minimize-button {
        position: absolute;
        top: -25px;
        right: -5px;
        cursor: pointer;
        font-size: 26px;
        background-color: transparent;
        border: 3px solid rgba(0, 0, 0, 0.8);
        color: #333;
        transition: color 0.3s ease; /* Smooth color transition */
      }

      @media (max-width: 767px) {
        #legend {
          top: 5px;
          right: 5px;
          padding: 5px;
        }

        .legend-item {
          margin-bottom: 3px;
          width: 150px;
        }

        .legend-item span {
          width: 15px;
          height: 15px;
          margin-right: 3px;
          text-align: center;
        }
      }

      @media (max-width: 480px) {
        #legend {
          top: 5px;
          right: 5px;
          padding: 5px;
          font-size: 12px;
        }

        .legend-item {
          margin-bottom: 2px;
          width: 120px;
        }

        .legend-item span {
          width: 12px;
          height: 12px;
          margin-right: 2px;
          text-align: center;
        }
      }

      .textt {
        min-width: 7em;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <div id="legend">
      <div class="legend-item">
        <span class="color-red radio"></span>
        <span class="label textt">Distance to be traveled</span>
      </div>
      <div class="legend-item">
        <span class="color-green radio"></span>
        <span class="label textt">Distance traveled</span>
      </div>
    </div>
    <div id="infoModal" class="modal">
      <div class="modal-content">
        <h2>Route Information</h2>
        <p>
          <strong>Source Location:</strong> <span id="sourceLocation"></span>
        </p>
        <p>
          <strong>Destination Location:</strong>
          <span id="destinationLocation"></span>
        </p>
        <p><strong>Via Location:</strong> <span id="viaLocation"></span></p>
        <p>
          <strong>Last Updated Time:</strong> <span id="lastUpdatedTime"></span>
        </p>
      </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/leaflet-ease/leaflet-ease.js"></script>
    <script type="module">
      // Your Mapbox access token
      var mapId = "<%=env%>";
      let data;
      var destination, line;
      var soldier;
      var routePath;
      var lineGeometry;
      let SOCKET_URL = "https://himraahi.in/";
      let currentZoom = 12; // Initial zoom level
      let scaleFactor = 10; // Initial scale factor
      // let SOCKET_URL = "http://localhost:3000/";
      mapboxgl.accessToken = mapId;

      // Create a socket connection
      const socket = io(`${SOCKET_URL}`);

      // Add the minimize button to the modal
      const modal = document.querySelector("#infoModal");
      const minimizeButton = document.createElement("button");
      minimizeButton.classList.add("minimize-button");
      minimizeButton.textContent = "-";
      minimizeButton.addEventListener("click", () => {
        modal.classList.toggle("minimized");
      });

      const modalContent = document.querySelector(".modal-content");
      modalContent.appendChild(minimizeButton);

      // Update the modal content with the route information
      function updateModalContent(routeInfo) {
        const {
          sourceLocation,
          destinationLocation,
          viaLocation,
          currentTime,
        } = routeInfo;

        const time = formatTime(currentTime);
        console.log("update time", currentTime, time);
        console.log("route info", routeInfo);
        document.getElementById("sourceLocation").textContent = start;
        document.getElementById("destinationLocation").textContent = end;
        document.getElementById("viaLocation").textContent = viaRoute;
        document.getElementById("lastUpdatedTime").textContent = time;
      }

      // Event handler for socket connection
      socket.on("connect", () => {
        console.log("Connected to the socket server");
      });

      // Extract the trip ID from the URL
      const queryString = window.location.pathname.split("p");
      const tripId = queryString[1].replace("/", "");

      // Initialize the map with a placeholder location
      var map = new mapboxgl.Map({
        container: "map",
        style: "mapbox://styles/mapbox/streets-v9",
        center: [0, 0], // Placeholder center
        zoom: 12,
        pitch: 60,
        bearing: 0,
      });

      // Create a marker element
      var el = document.createElement("div");
      el.className = "marker";

      // Initialize the line object
      var line;

      // Listen for the map 'load' event
      map.on("load", async function () {
        routePath = await getRoutePath(tripId);
        console.log("Route Path", routePath);

        map.addLayer({
          id: "custom_layer",
          type: "custom",
          renderingMode: "3d",
          onAdd: function (map, mbxContext) {
            window.tb = new Threebox(map, mbxContext, {
              defaultLights: true,
            });

            var options = {
              obj: "/models/bus.glb",
              type: "gltf",
              scale: 0.01,
              units: "scene",
              anchor: "bottom",
              rotation: { x: 90, y: -90, z: 0 },
            };

            tb.loadObj(options, function (model) {
              soldier = model.setCoords([0, 0]);
              // soldier.addEventListener("ObjectChanged", onObjectChanged, false);
              // soldier.addEventListener('ObjectMouseOver', onObjectChanged, false);
              model.addLabel(
                ` <h3 style="font-size: 1rem; color: #f48915; text-transform: uppercase; letter-spacing: 0.1em; text-shadow: 1px 1px 0 #52e7c0, 2px 2px 0 #4cceac, 3px 3px 0 #52e7c0;">Him Bus</h3>`,
                true,
                model.anchor,
                2
              );
              tb.add(soldier);
            });
          },
          render: function (gl, matrix) {
            tb.update();
          },
        });

        map.on("zoom", function () {
          currentZoom = map.getZoom();
          scaleFactor = Math.pow(2, 12 - currentZoom);
          console.log(
            "scaleFactor",
            scaleFactor,
            map.transform.scale,
            soldier,
            soldier.unitsPerMeter,
            soldier.setScale(map.transform.scale)
          );
          if (soldier) {
            if (scaleFactor > 0.15)
              soldier.scale.set(scaleFactor, scaleFactor, scaleFactor);
            // tb.update();
            console.log(soldier.scale);
          }
        });

        // Initialize the source for the bus path
        map.addSource("busPath", {
          type: "geojson",
          data: {
            type: "Feature",
            properties: {},
            geometry: {
              type: "LineString",
              coordinates: routePath,
            },
          },
        });

        // Add a layer to display the completed bus path
        map.addLayer({
          id: "completedPathLayer",
          type: "line",
          source: "busPath",
          layout: {
            "line-join": "round",
            "line-cap": "round",
          },
          paint: {
            "line-color": "#FF0000", // Completed path color
            "line-width": 5, // Line width
          },
        });
      });

      // Initialize an empty array to store coordinates
      let coordinatesArray = [];
      let start, end, viaRoute;
      // Listen for WebSocket updates from the server
      socket.on("broadcastDriverData", async (data) => {
        // Check if the data is for the specific trip
        const stringWithoutSlash = queryString[1].replace("/", "");
        if (data.tripID === stringWithoutSlash) {
          let via;
          updateModalContent(data);
          // Update the marker's location
          if (!isNaN(data.longitude) && !isNaN(data.latitude) && soldier) {
            console.log("data from sockets ", data);

            // Convert the coordinate array to a LngLat object
            const currentPosition = mapboxgl.LngLat.convert([
              data.longitude,
              data.latitude,
            ]);

            soldier.setCoords([data.longitude, data.latitude]);
            // var options = {
            //   path: coordinatesArray,
            //   duration: 10000, // Adjust duration as needed
            //   trackHeading: true, // Rotate the object to stay aligned with the direction of travel
            // };
            // soldier.followPath(options);
            // // Update map center to soldier's position
            map.flyTo({
              center: [data.longitude, data.latitude],
              speed: 0.6,
            });

            coordinatesArray.push([data.longitude, data.latitude]);
            if (coordinatesArray.length > 1) {
              lineGeometry = coordinatesArray.map(function (coordinate) {
                return coordinate.concat([coordinate.length - 1]);
              });
            }
          } else {
            console.error(
              "Invalid latitude or longitude in the received data:",
              data
            );
          }

          // Check if sourceLocation and destinationLocation are available
          if (data.sourceLocation && data.destinationLocation && lineGeometry) {
            console.log("lineGeometry", lineGeometry);
            // Add the line object to the map
            line = tb.line({
              geometry: lineGeometry,
              width: 5,
              color: "green",
            });

            tb.add(line);
          }
        }
      });

      function onObjectChanged(e) {
        let model = e.detail.object; //here's the object already modified
        let action = e.detail.action; //here's the action that changed the object
        console.log("model click action", e, action);
      }

      // Function to get the route path between sourceLocation and destinationLocation
      async function getRoutePath(tripId) {
        try {
          const response = await fetch(
            `${SOCKET_URL}himraahi/trip/Coords/${tripId}`
          );
          const tripData = await response.json();
          // console.log("trip response", tripData);
          const sourceLocation = tripData.coordinateStart;
          const destinationLocation = tripData.coordinateEnd;
          const via = tripData.via;
          start = tripData.Start;
          end = tripData.End;
          viaRoute = tripData.viaRoute;

          console.log("api trip data got", start, end, viaRoute, tripData);

          const response2 = await fetch(
            `https://api.mapbox.com/directions/v5/mapbox/driving/${sourceLocation[1]},${sourceLocation[0]};${via[1]},${via[0]};${destinationLocation[1]},${destinationLocation[0]}?alternatives=true&geometries=geojson&access_token=${mapboxgl.accessToken}`
          );

          const data = await response2.json();
          // console.log("trip response 2", data);
          return data.routes[0].geometry.coordinates;
        } catch (error) {
          console.error("Error fetching route path:", error);
          return [];
        }
      }

      function formatTime(currentTime) {
        // Create a regular expression to match various time formats
        const timeRegex = /(\d{1,2}):(\d{2}):(\d{2})\s*(AM|PM)?/;

        // Match the input time against the regular expression
        const match = currentTime.match(timeRegex);

        if (match) {
          // Extract hours, minutes, and seconds from the matched groups
          let hours = parseInt(match[1], 10);
          let minutes = parseInt(match[2], 10);
          let seconds = parseInt(match[3], 10);
          let period = match[4] || "AM"; // Default to AM if no period is specified

          // Adjust hours for PM period
          if (period === "PM" && hours < 12) {
            hours += 12;
          }

          // Ensure leading zeros if necessary
          hours = hours < 10 ? "0" + hours : hours;
          minutes = minutes < 10 ? "0" + minutes : minutes;
          seconds = seconds < 10 ? "0" + seconds : seconds;

          // Format the time in the desired format
          return `${hours}:${minutes}:${seconds}`;
        } else {
          // Return the input as is if it doesn't match the expected format
          return currentTime;
        }
      }
    </script>
  </body>
</html>
